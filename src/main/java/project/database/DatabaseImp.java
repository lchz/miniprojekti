package project.database;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import static spark.Spark.port;

/**
 *
 * @author chenhuiz
 */
public class DatabaseImp implements Database {

    private String databaseUrl;

    public DatabaseImp(String databaseUrl) throws SQLException {
        this.databaseUrl = databaseUrl;
        init();
    }

    @Override
    public void init() throws SQLException {
        Integer port;
        
        ProcessBuilder process = new ProcessBuilder();
        if (process.environment().get("PORT") != null) {
            port = Integer.parseInt(process.environment().get("PORT"));
        } else {
            port = 4566;
        }
        
        port(port);
        createTables();
    }

    @Override
    public Connection getConnection() throws SQLException {
        if (System.getenv("JDBC_DATABASE_URL") == null) {
            return DriverManager.getConnection(databaseUrl);
        } else {
            String dbstring = System.getenv("JDBC_DATABASE_URL");
            return DriverManager.getConnection(dbstring);
        }
    }

    private void createTables() throws SQLException {

        String createTipTable;
        
        if (System.getenv("JDBC_DATABASE_URL") == null) {

            createTipTable = "CREATE TABLE IF NOT EXISTS Tip(\n"
                    + "     id integer PRIMARY KEY,\n"
                    + "     title varchar(144) NOT NULL,\n"
                    + "     author varchar(144) NOT NULL,\n"
                    + "     description varchar(1000) NOT NULL,\n"
                    + "     url varchar(1000) NOT NULL,\n"
                    + "     checked boolean\n"
                    + ");";
        } else {

            createTipTable = "CREATE TABLE IF NOT EXISTS Tip(\n"
                    + "     id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n"
                    + "     title varchar(144) NOT NULL,\n"
                    + "     author varchar(144) NOT NULL,\n"
                    + "     description varchar(1000) NOT NULL,\n"
                    + "     url varchar(1000) NOT NULL,\n"
                    + "     checked boolean\n"
                    + ");";
        }
        Statement stmt = getConnection().createStatement();
        stmt.executeUpdate(createTipTable);
    }
    
    public void refresh() {
        try {
            String drop = "DROP TABLE IF EXISTS Tip;";
            
            Statement stmt = getConnection().createStatement();
            stmt.executeUpdate(drop);
            
        } catch (SQLException ex) {
            Logger.getLogger(DatabaseImp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
